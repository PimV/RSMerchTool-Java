/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.MainController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.event.DocumentListener;
import model.Category;
import model.ORM.ItemRow;

/**
 *
 * @author PimGame
 */
public class MainFrame extends javax.swing.JFrame {

    private MainController controller;
    private ItemRow selectedItem;
    private ArrayList<RowFilter<Object, Object>> filters = new ArrayList<>();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        UIManager.put("CheckBoxMenuItemUI",
                "view.StayOpenCheckBoxMenuItemUI");
        initComponents();

        this.setVisible(true);

        busyLabel.setVisible(false);

        orderAlphabetically();

        DocumentListener listener = new ItemSearchFieldListener(this);
        itemSearchField.getDocument().addDocumentListener(listener);

        for (Category c : Category.values()) {
            CategoryCheckBoxMenuItem categoryMenuItem;
            if (c.getCategoryNumber() < 20) {
                categoryMenuItem = new CategoryCheckBoxMenuItem(c);
                categoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        toggleCategoryActionsPerformed(evt);
                    }
                });
                categoryMenu1.add(categoryMenuItem);
            } else {
                categoryMenuItem = new CategoryCheckBoxMenuItem(c);
                categoryMenuItem.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        toggleCategoryActionsPerformed(evt);
                    }
                });
                categoryMenu2.add(categoryMenuItem);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPanel = new javax.swing.JPanel();
        itemSearchField = new javax.swing.JTextField();
        itemScrollPane = new javax.swing.JScrollPane();
        itemList = new org.jdesktop.swingx.JXList();
        graphicPanel = new javax.swing.JPanel();
        itemPanel = new javax.swing.JPanel();
        itemNameLabel = new javax.swing.JLabel();
        itemNameValue = new javax.swing.JLabel();
        itemDescriptionLabel = new javax.swing.JLabel();
        itemDescriptionValue = new javax.swing.JLabel();
        itemCategoryLabel = new javax.swing.JLabel();
        itemCategoryValue = new javax.swing.JLabel();
        itemMembersValue = new javax.swing.JLabel();
        itemMembersLabel = new javax.swing.JLabel();
        itemLastUpdatedLabel = new javax.swing.JLabel();
        itemLastUpdatedValue = new javax.swing.JLabel();
        itemAccuratePriceValue = new javax.swing.JLabel();
        itemAccuratePriceLabel = new javax.swing.JLabel();
        itemImage = new org.jdesktop.swingx.JXImageView();
        busyPanel = new javax.swing.JPanel();
        busyLabel = new org.jdesktop.swingx.JXBusyLabel();
        refreshItemButton = new org.jdesktop.swingx.JXButton();
        createOfferButton = new org.jdesktop.swingx.JXButton();
        favoriteItemButton = new org.jdesktop.swingx.JXButton();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        itemMenu = new javax.swing.JMenu();
        showAllItemsMenuItem = new javax.swing.JMenuItem();
        reloadAllItemsMenuItem = new javax.swing.JMenuItem();
        itemFilterMenu = new javax.swing.JMenu();
        toggleMemberItems = new javax.swing.JCheckBoxMenuItem();
        categoryMenu1 = new javax.swing.JMenu();
        categoryMenu2 = new javax.swing.JMenu();
        offerMenu = new javax.swing.JMenu();
        newOfferMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        itemList.setModel(new DefaultListModel<ItemRow>());
        itemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                itemListValueChanged(evt);
            }
        });
        itemScrollPane.setViewportView(itemList);

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(itemSearchField)
            .addComponent(itemScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemScrollPane)
                .addContainerGap())
        );

        graphicPanel.setBackground(new java.awt.Color(255, 255, 255));
        graphicPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout graphicPanelLayout = new javax.swing.GroupLayout(graphicPanel);
        graphicPanel.setLayout(graphicPanelLayout);
        graphicPanelLayout.setHorizontalGroup(
            graphicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphicPanelLayout.setVerticalGroup(
            graphicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );

        itemPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        itemNameLabel.setText("Item:");

        itemDescriptionLabel.setText("Description:");

        itemCategoryLabel.setText("Category:");

        itemMembersLabel.setText("Members:");

        itemLastUpdatedLabel.setText("Last Updated:");

        itemAccuratePriceLabel.setText("Price (gp):");

        itemImage.setBorder(new javax.swing.border.MatteBorder(null));
        itemImage.setEditable(false);
        itemImage.setEnabled(false);

        javax.swing.GroupLayout itemImageLayout = new javax.swing.GroupLayout(itemImage);
        itemImage.setLayout(itemImageLayout);
        itemImageLayout.setHorizontalGroup(
            itemImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        itemImageLayout.setVerticalGroup(
            itemImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout busyPanelLayout = new javax.swing.GroupLayout(busyPanel);
        busyPanel.setLayout(busyPanelLayout);
        busyPanelLayout.setHorizontalGroup(
            busyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
            .addGroup(busyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(busyPanelLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(busyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)))
        );
        busyPanelLayout.setVerticalGroup(
            busyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
            .addGroup(busyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(busyPanelLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(busyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)))
        );

        refreshItemButton.setText("Refresh item");
        refreshItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshItemButtonActionPerformed(evt);
            }
        });

        createOfferButton.setText("Create offer");
        createOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOfferButtonActionPerformed(evt);
            }
        });

        favoriteItemButton.setText("Favorite");
        favoriteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favoriteItemButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout itemPanelLayout = new javax.swing.GroupLayout(itemPanel);
        itemPanel.setLayout(itemPanelLayout);
        itemPanelLayout.setHorizontalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemPanelLayout.createSequentialGroup()
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(itemPanelLayout.createSequentialGroup()
                                .addComponent(itemDescriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemDescriptionValue))
                            .addGroup(itemPanelLayout.createSequentialGroup()
                                .addComponent(itemNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemNameValue))
                            .addGroup(itemPanelLayout.createSequentialGroup()
                                .addComponent(itemCategoryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemCategoryValue))
                            .addGroup(itemPanelLayout.createSequentialGroup()
                                .addComponent(itemMembersLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemMembersValue))
                            .addGroup(itemPanelLayout.createSequentialGroup()
                                .addComponent(itemAccuratePriceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemAccuratePriceValue)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(itemImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(busyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(itemPanelLayout.createSequentialGroup()
                        .addComponent(itemLastUpdatedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemLastUpdatedValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                        .addComponent(favoriteItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        itemPanelLayout.setVerticalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameLabel)
                            .addComponent(itemNameValue))
                        .addGap(7, 7, 7)
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemDescriptionLabel)
                            .addComponent(itemDescriptionValue))
                        .addGap(8, 8, 8)
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemCategoryLabel)
                            .addComponent(itemCategoryValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemMembersLabel)
                            .addComponent(itemMembersValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemAccuratePriceLabel)
                            .addComponent(itemAccuratePriceValue)))
                    .addComponent(itemImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(itemPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(busyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemLastUpdatedLabel)
                        .addComponent(itemLastUpdatedValue))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(createOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(favoriteItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        itemMenu.setText("Items");

        showAllItemsMenuItem.setText("Show all items");
        showAllItemsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllItemsMenuItemActionPerformed(evt);
            }
        });
        itemMenu.add(showAllItemsMenuItem);

        reloadAllItemsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        reloadAllItemsMenuItem.setText("Reload all items...");
        reloadAllItemsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadAllItemsMenuItemActionPerformed(evt);
            }
        });
        itemMenu.add(reloadAllItemsMenuItem);

        itemFilterMenu.setText(" Filters");

        toggleMemberItems.setText("Hide member items");
        toggleMemberItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleMemberItemsActionPerformed(evt);
            }
        });
        itemFilterMenu.add(toggleMemberItems);

        categoryMenu1.setText("Categories (1 - 19)");
        itemFilterMenu.add(categoryMenu1);

        categoryMenu2.setText("Categories (20 - 37)");
        itemFilterMenu.add(categoryMenu2);

        itemMenu.add(itemFilterMenu);

        mainMenuBar.add(itemMenu);

        offerMenu.setText("Offers");

        newOfferMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newOfferMenuItem.setText("Create new offer...");
        newOfferMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOfferMenuItemActionPerformed(evt);
            }
        });
        offerMenu.add(newOfferMenuItem);

        mainMenuBar.add(offerMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(itemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        this.controller.exit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void reloadAllItemsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadAllItemsMenuItemActionPerformed
        Object[] options = {
            "Yes, reload all!",
            "No, thanks"};
        int n = JOptionPane.showOptionDialog(this,
                "Are you sure you want to reload ALL items? This can take"
                + "up to five hours!",
                "Caution! Are you sure?",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                options,
                null);
        if (n == JOptionPane.OK_OPTION) {
            this.controller.getItemController().reloadAllItems();
        }

    }//GEN-LAST:event_reloadAllItemsMenuItemActionPerformed

    private void newOfferMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOfferMenuItemActionPerformed
        this.controller.getOfferController().createNewOffer();
    }//GEN-LAST:event_newOfferMenuItemActionPerformed

    private void showAllItemsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllItemsMenuItemActionPerformed
        clearList();
        this.controller.getItemController().showAllItems();
    }//GEN-LAST:event_showAllItemsMenuItemActionPerformed

    private void itemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_itemListValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (itemList.getSelectedIndex() != -1) {
                selectedItem = (ItemRow) itemList.getSelectedValue();
                int itemId = selectedItem.getID();

                this.controller.getItemController().reloadItem(itemId);
                showSingleItem(selectedItem);
            }
        }
    }//GEN-LAST:event_itemListValueChanged

    private void refreshItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshItemButtonActionPerformed
        if (selectedItem != null) {
            int itemId = selectedItem.getID();

            this.controller.getItemController().reloadItem(itemId);
            showSingleItem(selectedItem);
        }
    }//GEN-LAST:event_refreshItemButtonActionPerformed

    private void createOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOfferButtonActionPerformed
        this.controller.getOfferController().createNewOffer();
    }//GEN-LAST:event_createOfferButtonActionPerformed

    private void favoriteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoriteItemButtonActionPerformed
        System.out.println("Favoriting is not implemented yet.");
    }//GEN-LAST:event_favoriteItemButtonActionPerformed

    private void toggleMemberItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleMemberItemsActionPerformed
        toggleMembers();
    }//GEN-LAST:event_toggleMemberItemsActionPerformed

    private void toggleCategoryActionsPerformed(java.awt.event.ActionEvent evt) {
        filterCategory((CategoryCheckBoxMenuItem) evt.getSource());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public synchronized void addItemToList(final ItemRow item) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DefaultListModel<ItemRow> model = (DefaultListModel<ItemRow>) itemList.getModel();
                model.addElement(item);
            }
        });
    }

    public synchronized void updateItemInList(final ItemRow item) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                DefaultListModel<ItemRow> model = (DefaultListModel<ItemRow>) itemList.getModel();
                for (Object ir : model.toArray()) {
                    ItemRow irInModel = (ItemRow) ir;
                    if (irInModel.getItemId() == item.getItemId()) {
                        ir = item;
                        if (selectedItem.getItemId() == item.getItemId()) {
                            showSingleItem(item);
                        }
                        break;
                    }
                }
            }

        });
    }

    public void filterCategory(CategoryCheckBoxMenuItem menuItem) {
        int loopSize = filters.size();
        for (int i = 0; i < loopSize; i++) {
            if (filters.get(i) instanceof ItemCategoryFilter) {
                ItemCategoryFilter icf = (ItemCategoryFilter) filters.get(i);
                if (icf.getCategory() == menuItem.getCategory()) {
                    filters.remove(i);
                    applyFilters();
                    return;
                }

            }
        }

        //  addFilter(new ItemCategoryFilter(category));
        addFilter(new ItemCategoryFilter(menuItem));

        applyFilters();
    }

    public void toggleMembers() {
        int loopSize = filters.size();
        for (int i = 0; i < loopSize; i++) {
            if (filters.get(i) instanceof ItemMemberFilter) {
                filters.remove(i);
                applyFilters();
                return;
            }
        }
        if (toggleMemberItems.isSelected()) {
            addFilter(new ItemMemberFilter(false));
        } else {
            addFilter(new ItemMemberFilter(true));
        }
        applyFilters();
    }

    void replaceSearchFilter(ItemRowFilter itemRowFilter) {
        int loopSize = filters.size();
        for (int i = 0; i < loopSize; i++) {
            if (filters.get(i) instanceof ItemRowFilter) {
                filters.remove(i);
                if (itemRowFilter == null) {
                    applyFilters();
                    return;
                }
            }
        }
        addFilter(itemRowFilter);
        applyFilters();
    }

    void addFilter(RowFilter rf) {
        if (filters.contains(rf)) {
            System.out.println("filter already in");
        } else {
            System.out.println("adding rf");
            filters.add(rf);
        }
        applyFilters();
    }

    void applyFilters() {
        System.out.println("Filter size: " + filters.size());
        itemList.setRowFilter(RowFilter.andFilter(filters));
    }

    public void clearList() {
        itemList.setModel(new DefaultListModel<ItemRow>());
    }

    public void showSingleItem(ItemRow selectedItem) {
        //ItemRow selectedItem = (ItemRow) itemList.getSelectedValue();
        itemNameValue.setText(selectedItem.getName());
        itemDescriptionValue.setText(selectedItem.getDescription());
        itemCategoryValue.setText(selectedItem.getCategory().getNiceName());
        itemMembersValue.setText(selectedItem.isMembers() + "");
        itemLastUpdatedValue.setText(selectedItem.getLastUpdated());
        itemAccuratePriceValue.setText(selectedItem.getAccuratePriceString() + "gp");
        try {
            itemImage.setImage(new File("C://RSMerchTool//RSMerchTool-Java//images//" + selectedItem.getItemId() + ".jpg"));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void orderAlphabetically() {
        itemList.setAutoCreateRowSorter(true);
        itemList.toggleSortOrder();
    }

    public void setController(MainController controller) {
        this.controller = controller;
    }

    public void setBusy(boolean busy) {
        busyLabel.setVisible(busy);
        busyLabel.setBusy(busy);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXBusyLabel busyLabel;
    private javax.swing.JPanel busyPanel;
    private javax.swing.JMenu categoryMenu1;
    private javax.swing.JMenu categoryMenu2;
    private org.jdesktop.swingx.JXButton createOfferButton;
    private javax.swing.JMenuItem exitMenuItem;
    private org.jdesktop.swingx.JXButton favoriteItemButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel graphicPanel;
    private javax.swing.JLabel itemAccuratePriceLabel;
    private javax.swing.JLabel itemAccuratePriceValue;
    private javax.swing.JLabel itemCategoryLabel;
    private javax.swing.JLabel itemCategoryValue;
    private javax.swing.JLabel itemDescriptionLabel;
    private javax.swing.JLabel itemDescriptionValue;
    private javax.swing.JMenu itemFilterMenu;
    private org.jdesktop.swingx.JXImageView itemImage;
    private javax.swing.JLabel itemLastUpdatedLabel;
    private javax.swing.JLabel itemLastUpdatedValue;
    private org.jdesktop.swingx.JXList itemList;
    private javax.swing.JLabel itemMembersLabel;
    private javax.swing.JLabel itemMembersValue;
    private javax.swing.JMenu itemMenu;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JLabel itemNameValue;
    private javax.swing.JPanel itemPanel;
    private javax.swing.JScrollPane itemScrollPane;
    private javax.swing.JTextField itemSearchField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel listPanel;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem newOfferMenuItem;
    private javax.swing.JMenu offerMenu;
    private org.jdesktop.swingx.JXButton refreshItemButton;
    private javax.swing.JMenuItem reloadAllItemsMenuItem;
    private javax.swing.JMenuItem showAllItemsMenuItem;
    private javax.swing.JCheckBoxMenuItem toggleMemberItems;
    // End of variables declaration//GEN-END:variables

}
